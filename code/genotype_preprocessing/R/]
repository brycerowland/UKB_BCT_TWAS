#*******************************************************************************
#**********           TWAS Model Training via Elastic Net             **********
#**********           Linear Model or Ridge Regression                **********
#**********           Used as secondary model following               **********
#**********           Variable selection via Elastic Net              **********
#**********							      **********	
#**********           Written by:				      **********
#**********           Jonathan Rosen - jdrosen@live.unc.edu           **********
#**********           Annie Shan - yshan@live.unc.edu                 **********
#**********           revised by Munan on March19, 2019               **********
#**********           Version: 0.8                                    **********
#**********           April 14, 2019                                  **********
#*******************************************************************************


# Load required libraries

suppressPackageStartupMessages(require(optparse))
suppressPackageStartupMessages(require(glmnet))
suppressPackageStartupMessages(require(data.table))


# Start timer for code

time = proc.time()


# Set list of options for input files

option_list = list(
	make_option(c("-d", "--dosage"), action = "store", default = NA, type = "character",
		help = paste0("File name of genotype matrix for n subjects and p SNPs\n\t\t",
		"An n by p+1 matrix: n lines should contain Subject ID in field 1\n\t\t",
		"and dosages in fields 2:(p+1)")),
	make_option(c("-e", "--expression"), action = "store", default = NA, type = "character",
		help = paste0("File name of expression data\n\t\t",
		"First field should be Subject ID\n\t\t",
		"Second field should be expression value\n\t\t",
		"adjusted for desired covariates and properly normalized")),
	make_option(c("-s", "--snps"), action = "store", default = NA, type = "character",
		help = paste0("File name of list of SNPs\n\t\t",
		"This file should be four fields with one SNP ID per line\n\t\t",
		"SNP ID format is chr#, where # is chromosome number\n\t\t",
		"Next field is the chromosome position under BUILD 38\n\t\t",
		"The next two fields should be dosage allele and other allele\n\t\t",
		"In that order")),
	make_option(c("-v", "--var_list"), action = "store"), 
	make_option(c("-r", "--randomseed"), action = "store", default = NA, type = "integer",
		help = paste0("A number that used for set.seed")),
	make_option(c("-b", "--begin"), action = "store", default = NA, type = "integer",
                help = paste0("Start position of gene (integer)")),
	make_option(c("-f", "--finish"), action = "store", default = NA, type = "integer",
		help = paste0("End position of gene (integer)")),
	make_option(c("-w", "--window"), action = "store", default = NA, type = "integer",
		help = paste0("Size of window around gene (integer)")),
	make_option(c("-o", "--output"), action = "store", default = NA, type = "character",
		help = paste0("Prefix for output file(s)\n\t\t",
		"Suffixes include:\n\t\t",
		".betas.EN.txt - elastic net model with alpha = 0.5\n\t\t",
		".betas.lm.txt - linear model fit using non-zero coefficients from EN\n\t\t",
		".betas.ridge.txt - ridge regression in case lm not fit due to collinearity"))
)

opt = parse_args(OptionParser(option_list = option_list))


#Write Ensembl ID to stdout

cat(paste("*****   ",opt$o,"   *****\n"))


# Check input options

continue = TRUE
if (is.na(opt$d)) {
	cat("You must specify a dosage file\n")
	continue = FALSE
}
if (is.na(opt$e)) {
	cat("You must specify an expression file\n")
	continue = FALSE
}
if (is.na(opt$s)) {
	cat("You must specify a SNP list\n") 
	continue = FALSE
}
if (is.na(opt$o)) {
        cat("You must specify a prefix for output files\n")
        continue = FALSE
}
if (is.na(opt$r)) {
	cat("You must specify a number for set.seed")
	continue = FALSE
}
if (is.na(opt$b)) {
        cat("You must specify a start position\n")
        continue = FALSE
}
if (is.na(opt$f)) {
        cat("You must specify an end position\n")
        continue = FALSE
}
if (is.na(opt$w)) {
        cat("You must specify a window size\n")
        continue = FALSE
}

if (! continue) {
	cat("Please correct input arguments and submit job again\n\n")
	quit("no") 
}

if (opt$b < 1 | opt$b > 250e6) {
	cat("Starting position is out of range!\n\n")
	quit("no") 
}

if (opt$b >= opt$f) {
        cat("End position is out of range!\n\n")
        quit("no")
}

# Load genotype, expression, SNP list data, and reference var file

input.file = file(opt$d)

if (summary(input.file)$class == "gzfile") {
	X.dosage = fread(input = paste0("zcat ", opt$d), data.table = F, header = F)
} else {
	X.dosage = fread(input.file, data.table = F, header = F)
	cat("Dosage file is not zipped!\n")
	cat("Save storage space... compress your data!\n")
}

close(input.file)

row.names(X.dosage) = X.dosage[,1]
X.dosage = X.dosage[, -1]

expression = read.table(opt$e, row.names = 1, header = F, stringsAsFactors = F)
snp.list = read.table(opt$s, header = F)
ref_var_list = fread(opt$var_list, sep = "\t", header = F, data.table = F)

# Check dosage file

if (any(X.dosage > 2 || X.dosage < 0 || is.na(X.dosage))) {
	cat("Dosage values must be between 0 and 2 inclusive and can not contain missing values\n")
	cat("Please check values before attempting again\n\n")
	quit("no")
}

if (anyDuplicated(rownames(X.dosage))) {
        cat("Found duplicated subject IDs in dosage file\n")
        cat("Please check file before attempting again\n\n")
        quit("no")
}


# Check expression file

if (! is.numeric(expression[, 1]) || any(is.na(expression[, 1]))) {
	cat("Expression values must be numeric and non-missing\n")
	cat("Please check values before attempting again\n\n")
	quit("no")
}

if (anyDuplicated(rownames(expression))) {
        cat("Found duplicated subject IDs in expression file\n")
        cat("Please check file before attempting again\n\n")
        quit("no")
}


# Check SNP list file

if (dim(snp.list)[2] != 4) {
	cat("SNP list file must have four fields\n")
	cat("Format is chr# pos allele1 allele2\n")
	cat("Check file before attempting again\n\n")
	quit("no")
}

if (nrow(snp.list) != nrow(ref_var_list)){
	cat("Snp list for training and referrence snp list\n")
	cat("have differing numbers of variants\n.")
	cat("Check file before attempting again\n\n")
	quit("no")
}

training_snps_flipped <- paste(snp.list[,1], snp.list[,2], snp.list[,4], snp.list[,3], sep = ":")
flip_index <- which(training_snps_flipped %in% ref_var_list[,1])
n_snps_flipped <- length(flip_index)


rownames(snp.list) = paste(snp.list[,1], snp.list[,2], snp.list[,3], snp.list[,4], sep = ":")
rownames(snp.list)[flip_index] <- paste(snp.list[,1], snp.list[,2], snp.list[,4], snp.list[,3], sep = ":")[flip_index]


colnames(X.dosage) = rownames(snp.list)
print("error is above")
X.dosage[,flip_index] <- 2 - X.dosage[,flip_index]

# Rectify counts for SNPs

n.snps.dosage = dim(X.dosage)[2]
n.snp.list = dim(snp.list)[1]

cat(paste0("There are ", n.snps.dosage, " SNPs in the dosage file\n"))
cat(paste0("There are ", n.snp.list, " SNPs in the SNP list\n"))
if (n.snps.dosage != n.snp.list) {
	cat("SNP list does not match dosage file!!!\n\n")
	quit("no")
}

# Find SNPs in specific gene window

snps.in.window = which(snp.list[,2] >= opt$b - opt$w & snp.list[,2] <= opt$f + opt$w)
n.snps.window = length(snps.in.window)

if (n.snps.window < 2) {
	cat("Less than 2 SNPs in window. Check input file(s)!\n\n")
	quit("no")
} else {
	cat("************ SNP Information ************\n", file = paste0(opt$o, ".log"), append = F)
	cat(paste0("There are ", n.snps.dosage, " SNPs in the dosage file\n"), file = paste0(opt$o, ".log"), append = T)
	cat(paste0("There are ", n.snp.list, " SNPs in the SNP list\n"), file = paste0(opt$o, ".log"), append = T)
	cat(paste0("There are ", n_snps_flipped, " SNPs flipped to align with ref file\n"))
	cat(paste0("There are ", n_snps_flipped, " SNPs flipped to align with ref file\n"), file = paste0(opt$o, ".log"), append = T)
	cat(paste0("There are ", n.snps.window, " SNPs in specified window\n"), file = paste0(opt$o, ".log"), append = T) 
	cat(paste0("There are ", n.snps.window, " SNPs in specified window\n"))
}


# Get counts for overlapping subjects

n.subj.dosage = length(rownames(X.dosage))
n.subj.expression = dim(expression)[1]
miss.exp = expression[,1] == 0
n.miss.exp = sum(miss.exp)
if (n.miss.exp > 0) {
	expression = expression[rownames(expression)[!miss.exp], , drop = F]
}
subj.overlap = rownames(X.dosage) %in% rownames(expression)
subj.expression.overlap = rownames(expression) %in% rownames(X.dosage)
n.subj.overlap = sum(subj.overlap)

cat(paste0("There are ", n.subj.dosage, " subjects in the dosage file\n"))
cat(paste0("There are ", n.subj.expression, " subjects in the expression file\n"))
cat(paste0("There are ", n.miss.exp, " subjects with missing expression values\n"))
cat(paste0("There are ", n.subj.overlap, " subjects with expression values common to both files\n"))

cat("\n\n************ Subject Information ************\n", file = paste0(opt$o, ".log"), append = T)
cat(paste0("There are ", n.subj.dosage, " subjects in the dosage file\n"), file = paste0(opt$o, ".log"), append = T)
cat(paste0("There are ", n.subj.expression, " subjects in the expression file\n"), file = paste0(opt$o, ".log"), append = T)
cat(paste0("There are ", n.miss.exp, " subjects with missing expression avlues\n"), file = paste0(opt$o, ".log"), append = T)
cat(paste0("There are ", n.subj.overlap, " subjects with expression values common to both files\n"), file = paste0(opt$o, ".log"), append = T)


# Only conduct analyses if sufficient number of expression values

if (n.subj.overlap == 0) {
        cat("No overlapping subjects with expression values!\n\n")
        quit("no")
} else if ((n.subj.expression - n.miss.exp) < 50 || (n.subj.expression - n.miss.exp) / n.subj.overlap < 0.2) {
        cat("Insufficient number of non-missing expression values!\n\n")
        quit("no")
}


# Subset dosage and expression to contain only overlapping subjects

X.train = X.dosage[subj.overlap, snps.in.window]
y.train = expression[rownames(X.train), ]


# Test expression values for normality

normality.test = shapiro.test(y.train)
shapiro.res = prettyNum(normality.test$p.val, format = "fg", digits = 5)

if (shapiro.res < 0.05) {
	cat(paste0("Warning: Shapiro-Wilk test for normality of expression values resulted in p-value of ", shapiro.res, "\n"))
	cat("Analysis will continue but it is recommended to check expression values\n")
	cat("\n\n************ Test for normality of expression values ************\n", file = paste0(opt$o, ".log"), append = T)
	cat(paste0("Warning: Shapiro-Wilk test for normality of expression values resulted in p-value of ", shapiro.res, "\n"), file = paste0(opt$o, ".log"), append = T)
        cat("Analysis will continue but it is recommended to check expression values\n", file = paste0(opt$o, ".log"), append = T)
} else {
	cat(paste0("Shapiro-Wilk test for normality of expression values resulted in p-value of ", shapiro.res, "\n"))
	cat("\n\n************ Test for normality of expression values ************\n", file = paste0(opt$o, ".log"), append = T)
	cat(paste0("Shapiro-Wilk test for normality of expression values resulted in p-value of ", shapiro.res, "\n"), file = paste0(opt$o, ".log"), append = T)
}


# remove perfectly correlated SNPs

trim.dosage = function(X) {
	rsq = cor(X)
	rsq.rm = (abs(rsq - diag(ncol(X))) == 1)
	snps = which(apply(rsq.rm, 1, any))
	pool = snps
	keep = NULL
	dif = setdiff(pool, keep)

	while(length(dif) > 0){
  		keep = c(keep, dif[1])
  		rm = setdiff(which(rsq.rm[dif[1],]), dif[1])
  		pool = setdiff(pool, rm)
  		dif = setdiff(pool, keep)
	}

	snps.rm = snps[! snps %in% keep]

	if(length(snps.rm) > 0) {
  		X.trim = X[, -snps.rm]
		return(X.trim)
	} else {
		return(X)
	}
}

X.train.trim = trim.dosage(X.train)

n.trimmed = dim(X.train)[2] - dim(X.train.trim)[2]

cat(paste0("There were ", n.trimmed, " SNPs removed due to perfect collinearity\n"))
cat("\n\n************ Collinearity Information ************\n", file = paste0(opt$o, ".log"), append = T)
cat(paste0("There were ", n.trimmed, " SNPs removed due to perfect collinearity\n"), file = paste0(opt$o, ".log"), append = T)


# Fit Elastic Net 
set.seed(opt$r)
fit = cv.glmnet(as.matrix(X.train.trim), y.train, alpha = 0.5, family = "gaussian", standardize = F)
fit.df = data.frame(fit$cvm, fit$lambda, 1:length(fit$cvm))
best.lam = fit.df[fit.df[,2] == fit$lambda.min, ]
#best.lam = fit.df[fit.df[,2] == fit$lambda.1se, ]
ret = as.data.frame(fit$glmnet.fit$beta[, best.lam[1,3]])

if (var(as.matrix(X.train.trim) %*% ret[,1]) == 0) {
	cat("Model is singular - no correlation reported\n")
} else {
	model.cor = prettyNum(cor(as.matrix(X.train.trim) %*% ret[,1], y.train)^2, format = "fg", digits = 5)
	cat(paste0("Elastic Net model correlation is ", model.cor, "\n"))
	cat("\n\n************ Elastic Net Model Information ************\n", file = paste0(opt$o, ".log"), append = T)
	cat(paste0("Elastic Net model correlation is ", model.cor, "\n"), file = paste0(opt$o, ".log"), append = T)
}

beta.values = ret[ret[,1] != 0, 1]
n.betas = length(beta.values)
if (n.betas < 2) {
        cat("Less than 2 non-zero coefficients so no model reported\n\n")
        cat("Less than 2 non-zero coefficients so no model reported\n", file = paste0(opt$o, ".log"), append = T)
        quit("no")
}

beta.snps = colnames(X.train.trim)[ret[,1] != 0]
beta.snps.split = matrix(unlist(strsplit(beta.snps, split = ":")), nrow = length(beta.snps), ncol = 4, byrow = T)
betas.elnet = cbind(beta.snps.split, beta.values)
colnames(betas.elnet) = c("Chr", "Position", "Dosage_allele", "Other_allele", "Effect")
n.model = dim(X.train.trim)[2]

cat(paste0("There are ", n.betas, " non-zero coefficients out of ", n.model, " SNPs used to fit the model\n"))
cat(paste0("There are ", n.betas, " non-zero coefficients out of ", n.model, " SNPs used to fit the model\n"), file = paste0(opt$o, ".log"), append = T)

write.table(betas.elnet, file = paste0(opt$o, ".betas.EN.txt"), col.names = T, row.names = F, quote = F, sep = "\t")


# Use non-zero coefficient SNPs and fit linear model

data = as.data.frame(cbind(y.train, X.train.trim[, beta.snps]))
colnames(data) = c("y", colnames(X.train.trim[, beta.snps]))


lm.summary = summary(lm(y ~ ., data = data))
if (any(lm.summary$aliased)) {
	cat("Singularities in the attempted linear model\n")
	cat("Fitting ridge regression model instead\n")
	cat("\n\n************ Secondary Model Information ************\n", file = paste0(opt$o, ".log"), append = T)
	cat("Singularities in the attempted linear model\n", file = paste0(opt$o, ".log"), append = T)
        cat("Fitting ridge regression model instead\n", file = paste0(opt$o, ".log"), append = T)
	fit.ridge = cv.glmnet(as.matrix(X.train.trim[, beta.snps]), y.train, alpha = 0, family = "gaussian")
	fit.df.ridge = data.frame(fit.ridge$cvm, fit.ridge$lambda, 1:length(fit.ridge$cvm))
	best.lam.ridge = fit.df.ridge[fit.df.ridge[,2] == fit.ridge$lambda.min, ]
	ret.ridge = as.data.frame(fit.ridge$glmnet.fit$beta[, best.lam.ridge[1,3]])
	ridge.cor = prettyNum(cor(as.matrix(X.train.trim[, beta.snps]) %*% ret.ridge[,1], y.train)^2, format = "fg", digits = 5)
	cat(paste0("Ridge model correlation is ", ridge.cor, "\n"))
	cat(paste0("Ridge model correlation is ", ridge.cor, "\n"), file = paste0(opt$o, ".log"), append = T)

	beta.values.ridge = ret.ridge[, 1]
	beta.snps.ridge = colnames(X.train.trim[, beta.snps])
	beta.snps.split = matrix(unlist(strsplit(beta.snps.ridge, split = ":")), nrow = length(beta.snps.ridge), ncol = 4, byrow = T)
	betas.ridge = cbind(beta.snps.split, beta.values.ridge)
	colnames(betas.ridge) = c("Chr", "Position", "Dosage_allele", "Other_allele", "Effect")
	write.table(betas.ridge, file = paste0(opt$o, ".betas.ridge.txt"), col.names = T, row.names = F, quote = F, sep = "\t")
} else {
	f = lm.summary$fstatistic
	p.val = prettyNum(1 - pf(f[1], f[2], f[3]), format = "fg", digits = 5)
	cat(paste0("P-value for linear model is ", p.val, "\n"))
	cat(paste0("Adjusted r squared for linear model is ", prettyNum(lm.summary$r.squared, format = "fg", digits = 5), "\n"))
	cat("\n\n************ Secondary Model Information ************\n", file = paste0(opt$o, ".log"), append = T)
	cat(paste0("P-value for linear model is ", p.val, "\n"), file = paste0(opt$o, ".log"), append = T)
        cat(paste0("Adjusted r squared for linear model is ", prettyNum(lm.summary$r.squared, format = "fg", digits = 5), "\n"), file = paste0(opt$o, ".log"), append = T)
	beta.snps.lm = gsub("`", "", rownames(lm.summary$coeff)[2:length(rownames(lm.summary$coeff))])
	beta.snps.split = matrix(unlist(strsplit(beta.snps.lm, split = ":")), nrow = length(beta.snps.lm), ncol = 4, byrow = T)
	betas.lm = cbind(rbind(c("Intercept", rep(NA, 3)), beta.snps.split), lm.summary$coeff[,1])
	colnames(betas.lm) = c("Chr", "Position", "Dosage_allele", "Other_allele", "Effect")
	write.table(betas.lm, file = paste0(opt$o, ".betas.lm.txt"), col.names = T, row.names = F, quote = F, sep = "\t")
}


# Stop timer and report total run time

script.time = proc.time() - time
cat(paste0("Total run time was ", script.time[3], " seconds\n\n"))
cat("\n\n************ Run Information ************\n", file = paste0(opt$o, ".log"), append = T)
cat(paste0("Total run time was ", script.time[3], " seconds\n"), file = paste0(opt$o, ".log"), append = T)


